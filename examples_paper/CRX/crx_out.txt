> # Find all candidates for x_4 for the CRX robot
> # Given R_06, p_06
> 
> 
> # Input: R_06 and p_06
> xb := 0;
> xg := 0;
> t1 := 25/100;
> t2 := 25/100;
> t3 := 25/100;
> 
> # Define the system of equations
> P1 := (xb, xg, t1, t2, t3) -> 2*x1 + 4*x2*x4 + 4*x3*x4 - 4*x4*xb + 4*xb*xg +
> 2*x1*x2^2 + 2*x1*x3^2 - 2*x1*x4^2 - 2*x1*xb^2 + 2*x1*xg^2 - 4*x1^2*x2*x4 -
> 4*x1^2*x3*x4 - 4*x2*x3^2*x4 - 4*x2^2*x3*x4 - 4*x1^2*x4*xb - 4*x2*x4*xb^2 +
> 4*x2^2*x4*xb - 4*x3*x4*xb^2 + 4*x3^2*x4*xb + 4*x2*x4*xg^2 + 4*x3*x4*xg^2 -
> 4*x1^2*xb*xg + 4*x2^2*xb*xg + 4*x3^2*xb*xg + 4*x4*xb*xg^2 - 4*x4^2*xb*xg +
> 2*x1*x2^2*x3^2 - 2*x1*x2^2*x4^2 - 2*x1*x3^2*x4^2 - 2*x1*x2^2*xb^2 -
> 2*x1*x3^2*xb^2 + 2*x1*x4^2*xb^2 + 2*x1*x2^2*xg^2 + 2*x1*x3^2*xg^2 -
> 2*x1*x4^2*xg^2 - 2*x1*xb^2*xg^2 + 16*x2*x3*x4*xb - 2*x1*x2^2*x3^2*x4^2 -
> 2*x1*x2^2*x3^2*xb^2 + 2*x1*x2^2*x4^2*xb^2 + 2*x1*x3^2*x4^2*xb^2 +
> 2*x1*x2^2*x3^2*xg^2 - 2*x1*x2^2*x4^2*xg^2 - 2*x1*x3^2*x4^2*xg^2 -
> 2*x1*x2^2*xb^2*xg^2 - 2*x1*x3^2*xb^2*xg^2 + 2*x1*x4^2*xb^2*xg^2 +
> 4*x1^2*x2*x3^2*x4 + 4*x1^2*x2^2*x3*x4 + 4*x1^2*x2*x4*xb^2 + 4*x1^2*x2^2*x4*xb
> + 4*x1^2*x3*x4*xb^2 + 4*x1^2*x3^2*x4*xb + 4*x2*x3^2*x4*xb^2 +
> 4*x2^2*x3*x4*xb^2 - 4*x2^2*x3^2*x4*xb - 4*x1^2*x2*x4*xg^2 - 4*x1^2*x3*x4*xg^2
> - 4*x2*x3^2*x4*xg^2 - 4*x2^2*x3*x4*xg^2 - 4*x1^2*x2^2*xb*xg -
> 4*x1^2*x3^2*xb*xg + 4*x1^2*x4*xb*xg^2 + 4*x1^2*x4^2*xb*xg + 4*x2^2*x3^2*xb*xg
> - 4*x2*x4*xb^2*xg^2 - 4*x2^2*x4*xb*xg^2 - 4*x2^2*x4^2*xb*xg -
> 4*x3*x4*xb^2*xg^2 - 4*x3^2*x4*xb*xg^2 - 4*x3^2*x4^2*xb*xg +
> 16*x1^2*x2*x3*x4*xb - 16*x2*x3*x4*xb*xg^2 + 2*x1*x2^2*x3^2*x4^2*xb^2 -
> 2*x1*x2^2*x3^2*x4^2*xg^2 - 2*x1*x2^2*x3^2*xb^2*xg^2 + 2*x1*x2^2*x4^2*xb^2*xg^2
> + 2*x1*x3^2*x4^2*xb^2*xg^2 - 32*x1*x2*x4*xb*xg - 32*x1*x3*x4*xb*xg -
> 4*x1^2*x2*x3^2*x4*xb^2 - 4*x1^2*x2^2*x3*x4*xb^2 - 4*x1^2*x2^2*x3^2*x4*xb +
> 4*x1^2*x2*x3^2*x4*xg^2 + 4*x1^2*x2^2*x3*x4*xg^2 - 4*x1^2*x2^2*x3^2*xb*xg +
> 4*x1^2*x2*x4*xb^2*xg^2 - 4*x1^2*x2^2*x4*xb*xg^2 + 4*x1^2*x2^2*x4^2*xb*xg +
> 4*x1^2*x3*x4*xb^2*xg^2 - 4*x1^2*x3^2*x4*xb*xg^2 + 4*x1^2*x3^2*x4^2*xb*xg +
> 4*x2*x3^2*x4*xb^2*xg^2 + 4*x2^2*x3*x4*xb^2*xg^2 + 4*x2^2*x3^2*x4*xb*xg^2 -
> 4*x2^2*x3^2*x4^2*xb*xg + 2*x1*x2^2*x3^2*x4^2*xb^2*xg^2 +
> 32*x1*x2*x3^2*x4*xb*xg + 32*x1*x2^2*x3*x4*xb*xg - 4*x1^2*x2*x3^2*x4*xb^2*xg^2
> - 4*x1^2*x2^2*x3*x4*xb^2*xg^2 + 4*x1^2*x2^2*x3^2*x4*xb*xg^2 +
> 4*x1^2*x2^2*x3^2*x4^2*xb*xg - 16*x1^2*x2*x3*x4*xb*xg^2:
> 
> P2 := (xb, xg, t1, t2, t3) -> 20*t1 + 3*x1^2*x4^2 + 40*t2*x1 - 20*t1*x1^2 +
> 20*t1*x4^2 - 3*x1^2 + 3*x4^2 + 40*t2*x1*x4^2 - 20*t1*x1^2*x4^2 - 3:
> 
> P3 := (xb, xg, t1, t2, t3) -> 100*t3 - 108*x2 - 108*x3 + 30*x4 + 71*x2^2*x3^2
> + 71*x2^2*x4^2 - 71*x3^2*x4^2 + 100*t3*x2^2 + 100*t3*x3^2 + 100*t3*x4^2 +
> 108*x2*x3^2 + 108*x2^2*x3 - 108*x2*x4^2 - 30*x2^2*x4 - 108*x3*x4^2 -
> 30*x3^2*x4 + 71*x2^2 - 71*x3^2 - 71*x4^2 + 100*t3*x2^2*x3^2 + 100*t3*x2^2*x4^2
> + 100*t3*x3^2*x4^2 + 108*x2*x3^2*x4^2 + 108*x2^2*x3*x4^2 + 30*x2^2*x3^2*x4 -
> 120*x2*x3*x4 + 71*x2^2*x3^2*x4^2 + 100*t3*x2^2*x3^2*x4^2 - 71:
> 
> P4 := (xb, xg, t1, t2, t3) -> 2130*x4 - 7668*x3 + 5000*t1^2*x3^2 +
> 5000*t1^2*x4^2 + 5000*t2^2*x3^2 + 5000*t2^2*x4^2 + 5000*t3^2*x3^2 +
> 5000*t3^2*x4^2 - 4091*x3^2*x4^2 - 7668*x3*x4^2 - 2130*x3^2*x4 + 5000*t1^2 +
> 5000*t2^2 + 5000*t3^2 - 4091*x3^2 - 4091*x4^2 + 5000*t1^2*x3^2*x4^2 +
> 5000*t2^2*x3^2*x4^2 + 5000*t3^2*x3^2*x4^2 - 4091:
> 
> # Substitute in EE pose
> p1 := P1(xb, xg, t1, t2, t3):
> p2 := P2(xb, xg, t1, t2, t3):
> p3 := P3(xb, xg, t1, t2, t3):
> p4 := P4(xb, xg, t1, t2, t3):
> 
> # Combine p1 and p2
> p_12_1 := resultant(p1, p2, x1):
> f_p_12_1 := factors(p_12_1):
> r1 := select(p -> depends(p, x2) and depends(p, x3) and depends(p, x4),
> f_p_12_1[2])[1][1]:
> 
> # Combine in p3
> r1_p3_2 := resultant(r1, p3, x2):
> f_r1_p3_2 := factors(r1_p3_2):
> r2 := select(p -> depends(p, x3) and depends(p, x4), f_r1_p3_2[2])[1][1]:
> 
> # Combine in p4
> r2_p4_x3 := resultant(r2, p4, x3):
> # f_r2_p4_x3 := factors(r2_p4_x3):
> # r3 := f_r2_p4_x3[2][1][1]:
> 
> # Find zeros of resultant
> fsolve(r2_p4_x3);
> degree(r2_p4_x3);
> 
> f_o1 := factors(r2_p4_x3):
> print("Degree of each factor:"):
> map(v -> degree(v[1]), f_o1[2]);
> print("Multiplicity of each factor:");
> map(v -> v[2], f_o1[2]);
> print("Roots of each factor:");
> map(v -> [fsolve(v[1])], f_o1[2]);
> 
> map(v -> numer(v[1]), f_o1[2]);





-4.133457712, -3.074284875, -1.742909025, -1.534979253, -0.6410722220, 

  -0.5686196153, -0.2636005095, -0.2168961635, 0.2419282039, 0.3252788992, 

  0.5737534120, 0.6514746034, 1.559886649, 1.758644924, 3.793619375, 4.610501098


                                      48

                           "Degree of each factor:"

                                   [16, 32]

                        "Multiplicity of each factor:"

                                    [1, 1]

                           "Roots of each factor:"

  [[-3.074284875, -1.742909025, -0.6410722220, -0.2168961635, 0.3252788992, 

    0.5737534120, 1.559886649, 4.610501098], [-4.133457712, -1.534979253, 

    -0.5686196153, -0.2636005095, 0.2419282039, 0.6514746034, 1.758644924, 

    3.793619375]]


 [               16                  15                   14
 [592628990976 x4   - 493649640000 x4   - 7228671199758 x4  

                      13                    12                   11
    - 8539013655000 x4   - 29945708282222 x4   + 2896653453750 x4  

                       10                    9                     8
    + 45929194539844 x4   + 39808558518750 x4  + 177776490417945 x4 

                       7                    6                   5
    - 39808558518750 x4  + 45929194539844 x4  - 2896653453750 x4 

                       4                   3                   2
    - 29945708282222 x4  + 8539013655000 x4  - 7228671199758 x4 

                                                     32                  31
    + 493649640000 x4 + 592628990976, 592628990976 x4   - 493649640000 x4  

                      30                   29                    28
    - 3027362878350 x4   + 6686180505000 x4   - 77475144946958 x4  

                       27                     26                     25
    + 88195925013750 x4   - 386939987449800 x4   + 325055850288750 x4  

                        24                     23                     22
    - 679058766499047 x4   + 403614492536250 x4   + 660862424924500 x4  

                        21                      20                      19
    - 312477814158750 x4   + 5503164999763194 x4   - 1277268789487500 x4  

                          18                     17                       16
    + 12297831194563650 x4   - 805216238212500 x4   + 15664772927063670 x4  

                        15                       14                      13
    + 805216238212500 x4   + 12297831194563650 x4   + 1277268789487500 x4  

                         12                     11                     10
    + 5503164999763194 x4   + 312477814158750 x4   + 660862424924500 x4  

                        9                     8                     7
    - 403614492536250 x4  - 679058766499047 x4  - 325055850288750 x4 

                        6                    5                    4
    - 386939987449800 x4  - 88195925013750 x4  - 77475144946958 x4 

                      3                   2                                 ]
    - 6686180505000 x4  - 3027362878350 x4  + 493649640000 x4 + 592628990976]



